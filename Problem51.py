from Problem27 import primes as genprimes

# Huge runtime

# Generates a list of primes below 2 million
primes = [i for i in genprimes(2000000)]

def replace_single_digit_prime(i):
    """
    Returns the largest prime family size for replacing a single digit
    """
    # Sets variables
    numarray = [x for x in str(i)]
    start = 1
    maxcount = 0

    # Loops through all replaceable numbers
    for j in range(len(numarray) - 1):
        counter = 0
        # Loops through single digit numbers and replaces them
        for k in range(start, 10):
            numarray[j] = str(k)
            # Adds to counter if prime number created
            if int("".join(numarray)) in primes:
                counter += 1

        # Checks if counter is the largest and updates max
        if counter > maxcount:
            maxcount = counter
        
        # Sets start to 0 so only same length primes created
        start = 0
        # Recreates number array
        numarray = [x for x in str(i)]
    
    # Returns longest family
    return maxcount
    

def prime_replace(digits, numarray):
    """
    Returns the length of prime family generated by swapping digits in numarray
    """
    # Sets variables. Makes sure invalid primes arent generated
    start = 1 if 0 in digits else 0
    counter = 0

    # Loops through single digit numbers
    for i in range(start, 10):
        # Loops through each digit in digits
        for j in digits:
            numarray[j] = str(i)
        # Tests if new number is prime and adds to counter
        if int("".join(numarray)) in primes:
            counter += 1

    # Returns the length of the prime family
    return counter


def find_duplicates(numarray):
    """
    Yields a list of indexes of duplicate values
    """
    # Loops through each unique number in the array
    for num in set(numarray):
        # Resets list of indexes
        index = []
        # Looks for duplicates and adds index to array
        for i in range(len(numarray) - 1):
            if num == numarray[i]:
                index.append(i)

        # If there are duplicates yield the index list
        if len(index) > 1:
            yield index

def main():
    
    # Loops through all primes below 2 million
    for index, i in enumerate(primes):
        # Discards primes that are too small
        if i < 65587:
            continue
        # Gives an idea of the progress due to long run time
        elif index % 50 == 0:
            print("Done {} out of {}. Current value: {}".format(index, len(primes), i))
        
        # Creates an array of each number in the prime
        numarray = [x for x in str(i)]

        # Checks if replacing a single digit will give prime family
        if replace_single_digit_prime(i) == 8:
            return i
        
        # Checks if there are duplicate numbers in current prime
        elif len(set(numarray)) < len(numarray):
            # If there is then it replaces duplicates
            for digits in find_duplicates(numarray):
                # Checks if will give prime family
                if prime_replace(digits, numarray) == 8:
                    return i


# Prints out return value from main if program run as a script
if __name__ == "__main__":
    print(main())